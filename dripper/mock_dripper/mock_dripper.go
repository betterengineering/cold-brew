// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lodge93/cold-brew/dripper (interfaces: MotorController)

// Package mock_dripper is a generated GoMock package.
package mock_dripper

import (
	gomock "github.com/golang/mock/gomock"
	i2c "gobot.io/x/gobot/drivers/i2c"
	reflect "reflect"
)

// MockMotorController is a mock of MotorController interface
type MockMotorController struct {
	ctrl     *gomock.Controller
	recorder *MockMotorControllerMockRecorder
}

// MockMotorControllerMockRecorder is the mock recorder for MockMotorController
type MockMotorControllerMockRecorder struct {
	mock *MockMotorController
}

// NewMockMotorController creates a new mock instance
func NewMockMotorController(ctrl *gomock.Controller) *MockMotorController {
	mock := &MockMotorController{ctrl: ctrl}
	mock.recorder = &MockMotorControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMotorController) EXPECT() *MockMotorControllerMockRecorder {
	return m.recorder
}

// RunDCMotor mocks base method
func (m *MockMotorController) RunDCMotor(arg0 int, arg1 i2c.AdafruitDirection) error {
	ret := m.ctrl.Call(m, "RunDCMotor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDCMotor indicates an expected call of RunDCMotor
func (mr *MockMotorControllerMockRecorder) RunDCMotor(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDCMotor", reflect.TypeOf((*MockMotorController)(nil).RunDCMotor), arg0, arg1)
}

// SetDCMotorSpeed mocks base method
func (m *MockMotorController) SetDCMotorSpeed(arg0 int, arg1 int32) error {
	ret := m.ctrl.Call(m, "SetDCMotorSpeed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDCMotorSpeed indicates an expected call of SetDCMotorSpeed
func (mr *MockMotorControllerMockRecorder) SetDCMotorSpeed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDCMotorSpeed", reflect.TypeOf((*MockMotorController)(nil).SetDCMotorSpeed), arg0, arg1)
}

// Start mocks base method
func (m *MockMotorController) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMotorControllerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMotorController)(nil).Start))
}
